import os
import sys
import logging
import numpy as np
import cv2
from PIL import Image
import pytesseract
from pathlib import Path


class OCRHelper:
    """–ö–ª–∞—Å—Å-–ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å OCR."""

    def __init__(self):
        self.logger = logging.getLogger("BotLogger")

        # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ Tesseract
        self.tesseract_path = self._find_tesseract()
        if self.tesseract_path:
            pytesseract.pytesseract.tesseract_cmd = self.tesseract_path
            self.logger.info(f"‚úÖ Tesseract OCR –Ω–∞–π–¥–µ–Ω: {self.tesseract_path}")
            self.ocr_available = True
        else:
            self.logger.warning("‚ö† Tesseract OCR –Ω–µ –Ω–∞–π–¥–µ–Ω. –ë—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –ø—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ.")
            self.ocr_available = False

    def _find_tesseract(self):
        """–ü–æ–∏—Å–∫ –∏—Å–ø–æ–ª–Ω—è–µ–º–æ–≥–æ —Ñ–∞–π–ª–∞ Tesseract OCR."""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–ø—É—â–µ–Ω—ã –ª–∏ –º—ã –∏–∑ PyInstaller
        if getattr(sys, 'frozen', False):
            # –ï—Å–ª–∏ –∑–∞–ø—É—â–µ–Ω—ã –∏–∑ PyInstaller, –∏—â–µ–º –≤ –ø–∞–ø–∫–µ —Ä—è–¥–æ–º —Å –∏—Å–ø–æ–ª–Ω—è–µ–º—ã–º —Ñ–∞–π–ª–æ–º
            base_path = Path(sys._MEIPASS if hasattr(sys, '_MEIPASS') else os.path.dirname(sys.executable))
            tesseract_path = base_path / "tesseract" / "tesseract.exe"

            if tesseract_path.exists():
                return str(tesseract_path)

            # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –≤ _MEIPASS, –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ä—è–¥–æ–º —Å –∏—Å–ø–æ–ª–Ω—è–µ–º—ã–º —Ñ–∞–π–ª–æ–º
            app_dir = Path(os.path.dirname(sys.executable))
            tesseract_path = app_dir / "tesseract" / "tesseract.exe"

            if tesseract_path.exists():
                return str(tesseract_path)

        # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –ø—É—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ Tesseract
        standard_paths = [
            r"C:\Program Files\Tesseract-OCR\tesseract.exe",
            r"C:\Program Files (x86)\Tesseract-OCR\tesseract.exe",
            "/usr/bin/tesseract",
            "/usr/local/bin/tesseract"
        ]

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –ø—É—Ç–∏
        for path in standard_paths:
            if os.path.isfile(path):
                return path

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –≤ PATH
        try:
            import shutil
            tesseract_path = shutil.which("tesseract")
            if tesseract_path:
                return tesseract_path
        except:
            pass

        return None

    def recognize_number(self, image, min_val=10, max_val=99, default_val=12):
        """
        –†–∞—Å–ø–æ–∑–Ω–∞–µ—Ç —á–∏—Å–ª–æ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏ —Å –ø–æ–º–æ—â—å—é OCR.

        Args:
            image: –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è (numpy array)
            min_val: –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –¥–æ–ø—É—Å—Ç–∏–º–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
            max_val: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –¥–æ–ø—É—Å—Ç–∏–º–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
            default_val: –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é, –µ—Å–ª–∏ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å

        Returns:
            –†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω–æ–µ —á–∏—Å–ª–æ –∏–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        """
        if not self.ocr_available:
            return default_val

        try:
            # –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –ª—É—á—à–µ–≥–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è
            # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –¥–ª—è –ª—É—á—à–µ–≥–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è
            height, width = image.shape[:2]
            image = cv2.resize(image, (width * 3, height * 3), interpolation=cv2.INTER_CUBIC)

            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –æ—Ç—Ç–µ–Ω–∫–∏ —Å–µ—Ä–æ–≥–æ, –µ—Å–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ü–≤–µ—Ç–Ω–æ–µ
            if len(image.shape) > 2:
                gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)
            else:
                gray = image

            # –ë–∏–Ω–∞—Ä–∏–∑–∞—Ü–∏—è –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ü–∏—Ñ—Ä
            _, thresh = cv2.threshold(gray, 150, 255, cv2.THRESH_BINARY_INV + cv2.THRESH_OTSU)

            # –ò—Å–ø–æ–ª—å–∑—É–µ–º morph close –¥–ª—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —á–∞—Å—Ç–µ–π —Å–∏–º–≤–æ–ª–æ–≤
            kernel = cv2.getStructuringElement(cv2.MORPH_RECT, (3, 3))
            thresh = cv2.morphologyEx(thresh, cv2.MORPH_CLOSE, kernel)

            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ PIL Image –¥–ª—è pytesseract
            pil_img = Image.fromarray(thresh)

            # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º Tesseract –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä
            custom_config = r'--oem 3 --psm 6 outputbase digits'

            # –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞
            result = pytesseract.image_to_string(pil_img, config=custom_config).strip()
            self.logger.debug(f"OCR —Ä–µ–∑—É–ª—å—Ç–∞—Ç: '{result}'")

            # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–µ—Ä–≤–æ–µ –Ω–∞–π–¥–µ–Ω–Ω–æ–µ —á–∏—Å–ª–æ
            import re
            numbers = re.findall(r'\d+', result)

            if numbers:
                recognized_number = int(numbers[0])
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ —á–∏—Å–ª–æ –≤ –¥–æ–ø—É—Å—Ç–∏–º—ã—Ö –ø—Ä–µ–¥–µ–ª–∞—Ö
                if min_val <= recognized_number <= max_val:
                    return recognized_number
                else:
                    self.logger.warning(
                        f"‚ö† –†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω–æ–µ —á–∏—Å–ª–æ {recognized_number} –≤–Ω–µ –¥–æ–ø—É—Å—Ç–∏–º—ã—Ö –ø—Ä–µ–¥–µ–ª–æ–≤ [{min_val},{max_val}]")
            else:
                self.logger.warning("‚ö† OCR –Ω–µ —Å–º–æ–≥ —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —á–∏—Å–ª–æ")

        except Exception as e:
            self.logger.error(f"üö® –û—à–∏–±–∫–∞ –ø—Ä–∏ OCR-—Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–∏: {e}")

        # –ï—Å–ª–∏ —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        return default_val