import time
import logging
import threading
from enum import Enum, auto
from typing import Dict, Tuple, Optional, List, Callable
from core.stats_manager import StatsManager


class BotState(Enum):
    """Possible states of the bot."""
    IDLE = auto()
    STARTING = auto()
    SELECTING_BATTLE = auto()
    CONFIRMING_BATTLE = auto()
    IN_BATTLE = auto()
    BATTLE_ENDED = auto()
    CONNECTION_LOST = auto()
    RECONNECTING = auto()
    ERROR = auto()


class BotEngine:
    """Main bot logic and state management."""

    def __init__(self, adb_controller, image_matcher):
        self.adb = adb_controller
        self.image_matcher = image_matcher
        self.logger = logging.getLogger("BotLogger")

        # Event to control the bot thread
        self.running = threading.Event()

        # Current state of the bot
        self.state = BotState.IDLE

        # Click coordinates for different actions
        self.click_coords = {
            "start_battle": (1227, 832),
            "confirm_battle": (1430, 830),
            "auto_battle": (66, 642),
            "exit_after_win": (743, 819),
            "refresh_opponents": (215, 826),
            "reconnect_button": (803, 821)
        }

        # Define actions for different bot states
        self.state_actions = {
            BotState.IDLE: self._handle_idle,
            BotState.STARTING: self._handle_starting,
            BotState.SELECTING_BATTLE: self._handle_selecting_battle,
            BotState.CONFIRMING_BATTLE: self._handle_confirming_battle,
            BotState.IN_BATTLE: self._handle_in_battle,
            BotState.BATTLE_ENDED: self._handle_battle_ended,
            BotState.CONNECTION_LOST: self._handle_connection_lost,
            BotState.RECONNECTING: self._handle_reconnecting,
            BotState.ERROR: self._handle_error
        }

        # Bot statistics
        self.stats = {
            "battles_started": 0,
            "victories": 0,
            "defeats": 0,
            "connection_losses": 0,
            "errors": 0,
            "keys_collected": 0  # New statistic for tracking keys
        }

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è stats_manager
        self.stats_manager = None  # –ë—É–¥–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–∑–∂–µ –≤ main.py

        # Signals for communicating with the UI (will be set in the main application)
        self.signals = None

    def set_signals(self, signals):
        """Sets the signals object for UI communication."""
        self.signals = signals

    def capture_screen(self):
        """Captures the screen and returns the data."""
        return self.adb.capture_screen()

    def start(self):
        """Starts the bot in a separate thread."""
        if not self.running.is_set():
            if not self.adb.check_connection():
                self.logger.error("üö® ADB –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —ç–º—É–ª—è—Ç–æ—Ä–∞!")
                if self.signals:
                    self.signals.error.emit("ADB –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —ç–º—É–ª—è—Ç–æ—Ä–∞!")
                return False

            self.running.set()
            self.state = BotState.STARTING
            threading.Thread(target=self._bot_loop, daemon=True).start()
            self.logger.info("‚ñ∂ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
            return True
        return False

    def stop(self):
        """Stops the bot."""
        if self.running.is_set():
            self.running.clear()
            self.state = BotState.IDLE
            self.logger.info("‚õî –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

            # Save stats when stopping the bot
            if self.stats_manager:
                self.stats_manager.save_stats()

            return True
        return False

    def _bot_loop(self):
        """Main bot loop that handles state transitions and actions."""
        round_count = 0
        try:
            while self.running.is_set():
                # Call the appropriate handler for the current state
                handler = self.state_actions.get(self.state)
                if handler:
                    # State handlers return the next state
                    next_state = handler()
                    if next_state and next_state != self.state:
                        self.logger.info(f"–ü–µ—Ä–µ—Ö–æ–¥ —Å–æ—Å—Ç–æ—è–Ω–∏—è: {self.state} -> {next_state}")
                        self.state = next_state

                        # Update UI with state change
                        if self.signals:
                            self.signals.state_changed.emit(self.state.name)
                else:
                    self.logger.error(f"üö® –ù–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏—è: {self.state}")
                    self.state = BotState.ERROR

                # Short sleep to prevent CPU hogging
                time.sleep(0.1)

        except Exception as e:
            self.logger.error(f"üö® –û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ –±–æ—Ç–∞: {e}")
            self.state = BotState.ERROR
            self.stats["errors"] += 1
            if self.signals:
                self.signals.error.emit(f"–û—à–∏–±–∫–∞ –±–æ—Ç–∞: {e}")
        finally:
            # Clean up when the bot stops
            self.running.clear()
            self.state = BotState.IDLE
            if self.signals:
                self.signals.state_changed.emit(self.state.name)

    def _handle_idle(self):
        """Handler for IDLE state."""
        # In the idle state, we just wait for the start command
        time.sleep(0.5)
        return BotState.IDLE

    def _handle_starting(self):
        """Handler for STARTING state."""
        self.logger.info("üîÑ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")

        # Look for the battle screen
        self.logger.info("–î–µ–ª–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç —ç–∫—Ä–∞–Ω–∞...")
        screen_data = self.capture_screen()
        if screen_data:
            self.logger.info("–°–∫—Ä–∏–Ω—à–æ—Ç –ø–æ–ª—É—á–µ–Ω, –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º...")

            # Check for connection issues first
            if self._check_connection_issues(screen_data):
                self.logger.info("–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã —Å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ–º")
                return BotState.CONNECTION_LOST

            # Check if we're already on the battle screen
            if self.image_matcher.find_in_screen(screen_data, "cheak.png"):
                self.logger.info("–ù–∞–π–¥–µ–Ω —ç–∫—Ä–∞–Ω –≤—ã–±–æ—Ä–∞ –±–æ—è (cheak.png)")
                return BotState.SELECTING_BATTLE

            # Check if we're at the battle confirmation screen
            if self.image_matcher.find_in_screen(screen_data, "confirm_battle.png"):
                self.logger.info("–ù–∞–π–¥–µ–Ω —ç–∫—Ä–∞–Ω –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –±–æ—è (confirm_battle.png)")
                return BotState.CONFIRMING_BATTLE

            # Check if we're already in a battle
            if self.image_matcher.find_in_screen(screen_data, "auto_battle.png"):
                self.logger.info("–ù–∞–π–¥–µ–Ω —ç–∫—Ä–∞–Ω –±–æ—è (auto_battle.png)")
                return BotState.IN_BATTLE

            # Check if a battle just ended
            victory_found = self.image_matcher.find_in_screen(screen_data, "victory.png")
            defeat_found = self.image_matcher.find_in_screen(screen_data, "defeat.png")

            if victory_found:
                self.logger.info("–ù–∞–π–¥–µ–Ω —ç–∫—Ä–∞–Ω –ø–æ–±–µ–¥—ã (victory.png)")
                return BotState.BATTLE_ENDED
            elif defeat_found:
                self.logger.info("–ù–∞–π–¥–µ–Ω —ç–∫—Ä–∞–Ω –ø–æ—Ä–∞–∂–µ–Ω–∏—è (defeat.png)")
                return BotState.BATTLE_ENDED

            self.logger.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –Ω–∏ –æ–¥–∏–Ω –∏–∑–≤–µ—Å—Ç–Ω—ã–π —ç–∫—Ä–∞–Ω")
        else:
            self.logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç —ç–∫—Ä–∞–Ω–∞")

        # If we couldn't find a known screen, wait and try again
        self.logger.info("–û–∂–∏–¥–∞–µ–º 2 —Å–µ–∫—É–Ω–¥—ã –∏ –ø—Ä–æ–±—É–µ–º —Å–Ω–æ–≤–∞...")
        time.sleep(2)
        return BotState.STARTING

    def _handle_selecting_battle(self):
        """Handler for SELECTING_BATTLE state."""
        self.logger.info("–í—ã–±–æ—Ä –±–æ—è...")
        self.adb.tap(*self.click_coords["start_battle"])
        time.sleep(2)
        return BotState.CONFIRMING_BATTLE

    def _handle_confirming_battle(self):
        """Handler for CONFIRMING_BATTLE state."""
        self.logger.info("–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –±–æ—è...")
        self.adb.tap(*self.click_coords["confirm_battle"])
        self.stats["battles_started"] += 1

        # Wait for the auto battle button to appear
        _, match_loc = self.image_matcher.wait_for_images(
            self.capture_screen, ["auto_battle.png"], timeout=50, check_interval=3
        )

        if match_loc:
            return BotState.IN_BATTLE
        else:
            self.logger.error("üö® –ö–Ω–æ–ø–∫–∞ –∞–≤—Ç–æ–±–æ—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")

            # Check for connection issues
            screen_data = self.capture_screen()
            if screen_data and self._check_connection_issues(screen_data):
                return BotState.CONNECTION_LOST

            return BotState.ERROR

    def update_settings(self, battle_timeout=None, max_refresh_attempts=None):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞ –≤–æ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è.

        Args:
            battle_timeout (int, optional): –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –±–æ—è –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
            max_refresh_attempts (int, optional): –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        """
        from config import config

        # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∑–Ω–∞—á–µ–Ω–∏—è –ø–µ—Ä–µ–¥–∞–Ω—ã
        if battle_timeout is not None:
            self.logger.info(f"–û–±–Ω–æ–≤–ª–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –±–æ—è: {battle_timeout} —Å–µ–∫")

        if max_refresh_attempts is not None:
            self.logger.info(f"–û–±–Ω–æ–≤–ª–µ–Ω–æ –º–∞–∫—Å. –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {max_refresh_attempts}")

        # –õ–æ–≥–∏—Ä—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫
        self.logger.info("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω—ã")

    def _handle_in_battle(self):
        """Handler for IN_BATTLE state."""
        from config import config

        self.logger.info("–í –±–æ—é, –≤–∫–ª—é—á–∞–µ–º –∞–≤—Ç–æ–±–æ–π...")
        self.adb.tap(*self.click_coords["auto_battle"])

        # –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        battle_timeout = config.get("bot", "battle_timeout", 120)
        check_interval = config.get("bot", "check_interval", 3)

        self.logger.info(f"–û–∂–∏–¥–∞–Ω–∏–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è –±–æ—è (—Ç–∞–π–º–∞—É—Ç: {battle_timeout} —Å–µ–∫)...")

        # Wait for battle to end (victory or defeat)
        result, _ = self.image_matcher.wait_for_images(
            self.capture_screen, ["victory.png", "defeat.png"],
            timeout=battle_timeout,
            check_interval=check_interval
        )

        if result:
            return BotState.BATTLE_ENDED
        else:
            # Check for connection issues
            screen_data = self.capture_screen()
            if screen_data and self._check_connection_issues(screen_data):
                return BotState.CONNECTION_LOST

            # Battle seems to be stuck, try emergency clicks
            self.logger.warning("‚ö† –ë–æ–π, –ø–æ—Ö–æ–∂–µ, –∑–∞—Å—Ç—Ä—è–ª! –í—ã–ø–æ–ª–Ω—è–µ–º —ç–∫—Å—Ç—Ä–µ–Ω–Ω—ã–µ –Ω–∞–∂–∞—Ç–∏—è.")
            self._perform_emergency_clicks()
            return BotState.STARTING

    def _handle_battle_ended(self):
        """Handler for BATTLE_ENDED state."""
        from config import config

        # Check which result screen we're on
        screen_data = self.capture_screen()
        if not screen_data:
            return BotState.ERROR

        if self.image_matcher.find_in_screen(screen_data, "victory.png"):
            self.logger.info("üèÜ –ü–æ–±–µ–¥–∞! –ê–Ω–∞–ª–∏–∑ –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –Ω–∞–≥—Ä–∞–¥...")
            self.stats["victories"] += 1

            # Detect and count keys before clicking to exit
            keys_count = self.image_matcher.detect_keys(screen_data)
            if keys_count > 0:
                self.stats["keys_collected"] += keys_count
                self.logger.info(f"üîë –ü–æ–ª—É—á–µ–Ω–æ {keys_count} –∫–ª—é—á–µ–π. –í—Å–µ–≥–æ —Å–æ–±—Ä–∞–Ω–æ: {self.stats['keys_collected']}")

                # If signals is set, emit stats_updated to refresh UI
                if self.signals:
                    self.signals.stats_updated.emit(self.stats)

            # Continue with normal flow - exit after win
            self.adb.tap(*self.click_coords["exit_after_win"])
            time.sleep(5)

            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
            if self.stats_manager:
                self.stats_manager.update_stats(self.stats)

            return BotState.STARTING

        elif self.image_matcher.find_in_screen(screen_data, "defeat.png"):
            self.logger.info("‚ùå –ü–æ—Ä–∞–∂–µ–Ω–∏–µ! –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —Å–æ–ø–µ—Ä–Ω–∏–∫–æ–≤ –∏ –ø—Ä–æ–±—É–µ–º —Å–Ω–æ–≤–∞.")
            self.stats["defeats"] += 1

            # –ù–û–í–´–ô –ö–û–î: –≠–º–∏—Ç–∏—Ä—É–µ–º —Å–∏–≥–Ω–∞–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            if self.signals:
                self.signals.stats_updated.emit(self.stats)

            self.adb.tap(*self.click_coords["exit_after_win"])
            time.sleep(10)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø—Ä–µ–≤—ã—à–µ–Ω–æ –ª–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            max_refresh = config.get("bot", "max_refresh_attempts", 3)
            self.logger.info(f"–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Å–æ–ø–µ—Ä–Ω–∏–∫–æ–≤ (–º–∞–∫—Å. –ø–æ–ø—ã—Ç–æ–∫: {max_refresh})...")

            self.adb.tap(*self.click_coords["refresh_opponents"])
            time.sleep(2)

            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
            if self.stats_manager:
                self.stats_manager.update_stats(self.stats)

            return BotState.STARTING

        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤ –ª—é–±–æ–º —Å–ª—É—á–∞–µ
        if self.stats_manager:
            self.stats_manager.update_stats(self.stats)

        return BotState.STARTING

    def _handle_connection_lost(self):
        """Handler for CONNECTION_LOST state."""
        self.logger.warning("‚ö† –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å —Å–µ—Ä–≤–µ—Ä–æ–º –ø–æ—Ç–µ—Ä—è–Ω–æ! –ü—ã—Ç–∞–µ–º—Å—è –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è...")
        self.stats["connection_losses"] += 1

        # Wait for the "–°–≤—è–∑–∞—Ç—å—Å—è —Å –Ω–∞–º–∏" button to appear
        screen_data = self.capture_screen()
        if not screen_data:
            return BotState.ERROR

        # Check if we already see the contact us button
        if self.image_matcher.find_in_screen(screen_data, "contact_us.png"):
            # Click on the "–°–≤—è–∑–∞—Ç—å—Å—è —Å –Ω–∞–º–∏" button at coordinates 803, 821
            self.adb.tap(*self.click_coords["reconnect_button"])
            time.sleep(7)
            return BotState.RECONNECTING

        # If not, wait for it to appear
        result, _ = self.image_matcher.wait_for_images(
            self.capture_screen, ["contact_us.png"], timeout=60, check_interval=3
        )

        if result:
            self.adb.tap(*self.click_coords["reconnect_button"])
            time.sleep(7)
            return BotState.RECONNECTING
        else:
            self.logger.error("üö® –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∫–Ω–æ–ø–∫—É –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è!")
            return BotState.ERROR

    def _handle_reconnecting(self):
        """Handler for RECONNECTING state - implements the recovery algorithm."""
        self.logger.info("–ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–≥—Ä–µ...")

        # Try to find cheak.png or confirm_battle.png first (5 seconds)
        result, _ = self.image_matcher.wait_for_images(
            self.capture_screen,
            ["cheak.png", "confirm_battle.png"],
            timeout=5,
            check_interval=1
        )

        if result == "cheak.png":
            return BotState.SELECTING_BATTLE
        elif result == "confirm_battle.png":
            return BotState.CONFIRMING_BATTLE

        # If not found, try to find victory.png or defeat.png (another 5 seconds)
        result, _ = self.image_matcher.wait_for_images(
            self.capture_screen,
            ["victory.png", "defeat.png"],
            timeout=5,
            check_interval=1
        )

        if result in ["victory.png", "defeat.png"]:
            return BotState.BATTLE_ENDED

        # If still not found, look for auto_battle.png
        result, _ = self.image_matcher.wait_for_images(
            self.capture_screen,
            ["auto_battle.png"],
            timeout=5,
            check_interval=1
        )

        if result == "auto_battle.png":
            return BotState.IN_BATTLE

        # If we still can't find any known screens, return to starting state
        self.logger.warning("‚ö† –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã –ø–æ—Å–ª–µ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è. –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫...")
        return BotState.STARTING

    def _handle_error(self):
        """Handler for ERROR state."""
        self.logger.error("üö® –ë–æ—Ç —Å—Ç–æ–ª–∫–Ω—É–ª—Å—è —Å –æ—à–∏–±–∫–æ–π. –ü—ã—Ç–∞–µ–º—Å—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å—Å—è...")
        time.sleep(5)
        return BotState.STARTING

    def _check_connection_issues(self, screen_data: bytes) -> bool:
        """
        Checks if there are connection issues on the current screen.

        Returns:
            True if connection issues detected, False otherwise
        """
        # Check for "–û–∂–∏–¥–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞" message
        if self.image_matcher.find_in_screen(screen_data, "waiting_for_server.png"):
            self.logger.warning("‚ö† –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ '–û–∂–∏–¥–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞'")
            return True

        # Check for "–°–≤—è–∑–∞—Ç—å—Å—è —Å –Ω–∞–º–∏" button
        if self.image_matcher.find_in_screen(screen_data, "contact_us.png"):
            self.logger.warning("‚ö† –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –∫–Ω–æ–ø–∫–∞ '–°–≤—è–∑–∞—Ç—å—Å—è —Å –Ω–∞–º–∏'")
            return True

        return False

    def _perform_emergency_clicks(self):
        """Performs emergency clicks to try to recover from a stuck state."""
        self.logger.warning("‚ö† –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —ç–∫—Å—Ç—Ä–µ–Ω–Ω—ã—Ö –Ω–∞–∂–∞—Ç–∏–π...")

        # Click back button
        self.adb.tap(49, 50)
        time.sleep(2)

        # Click center of screen
        self.adb.tap(588, 825)
        time.sleep(2)

        # Click exit button position
        self.adb.tap(743, 819)
        time.sleep(10)

        # Click refresh button position
        self.adb.tap(215, 826)
        time.sleep(2)