import os
import subprocess
import random
import logging
from typing import Tuple, Optional


class AdbController:
    """Handles communication with the Android device via ADB."""

    def __init__(self, adb_path: str):
        self.adb_path = adb_path
        self.logger = logging.getLogger("BotLogger")

        # Set creation flags based on OS
        self.creation_flags = 0
        if os.name == 'nt':
            self.creation_flags = subprocess.CREATE_NO_WINDOW

    def check_connection(self) -> bool:
        """Checks if ADB is connected to a device."""
        try:
            self.logger.info(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è ADB. –ü—É—Ç—å –∫ ADB: {self.adb_path}")

            result = subprocess.run(
                [self.adb_path, "devices"],
                stdout=subprocess.PIPE, stderr=subprocess.PIPE,
                timeout=5, creationflags=self.creation_flags
            )
            output = result.stdout.decode("utf-8")
            error = result.stderr.decode("utf-8") if result.stderr else ""

            self.logger.info(f"ADB devices –≤—ã–≤–æ–¥: {output}")
            if error:
                self.logger.warning(f"ADB devices –æ—à–∏–±–∫–∞: {error}")

            if "device" in output and "List of devices" in output:
                # Check if any actual device is listed
                lines = output.strip().split('\n')
                if len(lines) > 1:  # More than just the header line
                    self.logger.info("‚úÖ ADB –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ. –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –Ω–∞–π–¥–µ–Ω–æ.")
                    return True
                else:
                    self.logger.info("üö® ADB –∑–∞–ø—É—â–µ–Ω, –Ω–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã.")
            else:
                self.logger.info("üö® ADB –Ω–µ –æ–±–Ω–∞—Ä—É–∂–∏–ª —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ.")
        except Exception as e:
            self.logger.error(f"üö® –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è adb: {e}")
        return False

    def tap(self, x: int, y: int, add_randomness: bool = True) -> bool:
        """
        Send a tap command to the device.

        Args:
            x: X coordinate
            y: Y coordinate
            add_randomness: If True, adds small random offsets to coordinates

        Returns:
            True if tap was successful, False otherwise
        """
        if add_randomness:
            x_offset = random.randint(-5, 5)
            y_offset = random.randint(-5, 5)
            x += x_offset
            y += y_offset

        try:
            subprocess.run(
                [self.adb_path, "shell", "input", "tap", str(x), str(y)],
                stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL,
                check=True, timeout=5, creationflags=self.creation_flags
            )
            self.logger.info(f"–ù–∞–∂–∞—Ç–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã ({x}, {y})")
            return True
        except subprocess.TimeoutExpired:
            self.logger.error("üö® –¢–∞–π–º–∞—É—Ç ADB –Ω–∞–∂–∞—Ç–∏—è: –ö–æ–º–∞–Ω–¥–∞ –Ω–µ –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å –≤–æ–≤—Ä–µ–º—è")
        except subprocess.CalledProcessError as e:
            self.logger.error(f"üö® –û—à–∏–±–∫–∞ ADB –Ω–∞–∂–∞—Ç–∏—è: {e}")
        except Exception as e:
            self.logger.error(f"üö® –ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏: {e}")
        return False

    def capture_screen(self) -> Optional[bytes]:
        """
        Captures the current screen via ADB.

        Returns:
            Raw screen data as bytes or None if failed
        """
        for attempt in range(3):
            try:
                self.logger.debug(f"–ü–æ–ø—ã—Ç–∫–∞ –∑–∞—Ö–≤–∞—Ç–∞ —ç–∫—Ä–∞–Ω–∞ #{attempt + 1}")

                process = subprocess.Popen(
                    [self.adb_path, "shell", "screencap", "-p"],
                    stdout=subprocess.PIPE, stderr=subprocess.PIPE,
                    creationflags=self.creation_flags
                )

                try:
                    screen_data, stderr = process.communicate(timeout=5)

                    if stderr:
                        stderr_text = stderr.decode('utf-8', errors='ignore')
                        self.logger.warning(f"–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –ø—Ä–∏ –∑–∞—Ö–≤–∞—Ç–µ —ç–∫—Ä–∞–Ω–∞: {stderr_text}")

                    if not screen_data or len(screen_data) < 100:  # –°–ª–∏—à–∫–æ–º –º–∞–ª–µ–Ω—å–∫–∏–π —Ä–∞–∑–º–µ—Ä –¥–ª—è –≤–∞–ª–∏–¥–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                        self.logger.error(
                            f"–ü–æ–ª—É—á–µ–Ω—ã –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —ç–∫—Ä–∞–Ω–∞, —Ä–∞–∑–º–µ—Ä: {len(screen_data) if screen_data else 0} –±–∞–π—Ç")
                        continue

                except subprocess.TimeoutExpired:
                    process.kill()
                    screen_data, stderr = process.communicate()
                    self.logger.error(f"üö® –¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –∑–∞—Ö–≤–∞—Ç–µ —ç–∫—Ä–∞–Ω–∞ (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1})")
                    continue

                screen_data = screen_data.replace(b'\r\n', b'\n')

                self.logger.debug(f"–ó–∞—Ö–≤–∞—Ç —ç–∫—Ä–∞–Ω–∞ —É—Å–ø–µ—à–µ–Ω, —Ä–∞–∑–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö: {len(screen_data)} –±–∞–π—Ç")
                return screen_data

            except Exception as e:
                self.logger.error(f"üö® –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞—Ö–≤–∞—Ç–µ —ç–∫—Ä–∞–Ω–∞ (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}): {e}")

            # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–æ–π
            import time
            time.sleep(1)

        self.logger.error("üö® –û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–∑ ADB –ø–æ—Å–ª–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –ø–æ–ø—ã—Ç–æ–∫.")
        return None