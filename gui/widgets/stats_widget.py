from PyQt6.QtWidgets import (
    QWidget, QVBoxLayout, QHBoxLayout, QLabel, QComboBox, QFrame,
    QGridLayout, QTableWidget, QTableWidgetItem, QHeaderView, QScrollArea, QSizePolicy,
    QTabWidget, QPushButton, QApplication
)
from PyQt6.QtCore import Qt, QTimer
from PyQt6.QtGui import QFont, QColor

from gui.styles import Styles
from gui.components.stat_card import StatCard
from gui.components.styled_table import StyledTable
from gui.widgets.chart_widgets import BattlesChartWidget, KeysChartWidget, SilverChartWidget


class StatsWidget(QWidget):
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏."""

    def __init__(self, bot_engine, parent=None):
        super().__init__(parent)
        self.bot_engine = bot_engine

        # –î–æ–±–∞–≤–ª—è–µ–º –ª–æ–≥–≥–µ—Ä –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        import logging
        self._py_logger = logging.getLogger("BotLogger")

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è UI
        self.init_ui()

    def init_ui(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏."""
        # –û—Å–Ω–æ–≤–Ω–æ–π –ª—ç–π–∞—É—Ç
        layout = QVBoxLayout(self)
        layout.setContentsMargins(0, 0, 0, 0)
        layout.setSpacing(20)

        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∏ –≤—ã–±–æ—Ä –ø–µ—Ä–∏–æ–¥–∞ –≤ –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–µ
        header_layout = QHBoxLayout()

        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        title_layout = QVBoxLayout()

        title_label = QLabel("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∞")
        title_label.setObjectName("title")
        title_label.setStyleSheet(f"""
            font-size: 22px;
            font-weight: bold;
            color: {Styles.COLORS['text_primary']};
        """)
        title_layout.addWidget(title_label)

        subtitle_label = QLabel("–î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞")
        subtitle_label.setObjectName("subtitle")
        subtitle_label.setStyleSheet(f"""
            font-size: 14px;
            color: {Styles.COLORS['text_secondary']};
        """)
        title_layout.addWidget(subtitle_label)

        header_layout.addLayout(title_layout)

        # –í—ã–±–æ—Ä –ø–µ—Ä–∏–æ–¥–∞ (—Å–ø—Ä–∞–≤–∞)
        period_layout = QHBoxLayout()
        period_layout.setAlignment(Qt.AlignmentFlag.AlignRight | Qt.AlignmentFlag.AlignVCenter)

        period_label = QLabel("–ü–µ—Ä–∏–æ–¥:")
        period_label.setStyleSheet(f"color: {Styles.COLORS['text_secondary']};")
        period_layout.addWidget(period_label)

        self.period_combo = QComboBox()
        self.period_combo.addItems(["–°–µ–≥–æ–¥–Ω—è", "–ù–µ–¥–µ–ª—è", "–ú–µ—Å—è—Ü", "–í—Å–µ –≤—Ä–µ–º—è"])
        self.period_combo.setFixedWidth(150)
        self.period_combo.currentIndexChanged.connect(self.update_stats_period)
        period_layout.addWidget(self.period_combo)

        header_layout.addLayout(period_layout)

        layout.addLayout(header_layout)

        # –°–æ–∑–¥–∞–µ–º –≤–∏–¥–∂–µ—Ç —Å –≤–∫–ª–∞–¥–∫–∞–º–∏
        self.tab_widget = QTabWidget()
        self.tab_widget.setDocumentMode(True)  # –ë–æ–ª–µ–µ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –≤–∏–¥ –≤–∫–ª–∞–¥–æ–∫
        self.tab_widget.setStyleSheet(f"""
            QTabBar::tab {{
                padding: 8px 16px;
                font-size: 14px;
            }}
        """)

        # –°–æ–∑–¥–∞–µ–º –ø–µ—Ä–≤—É—é –≤–∫–ª–∞–¥–∫—É –¥–ª—è –æ–±–∑–æ—Ä–∞ (–≥—Ä–∞—Ñ–∏–∫–∏ –∏ –æ—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏)
        self.overview_tab = QWidget()
        self.setup_overview_tab()
        self.tab_widget.addTab(self.overview_tab, "–û–±–∑–æ—Ä")

        # –°–æ–∑–¥–∞–µ–º –≤—Ç–æ—Ä—É—é –≤–∫–ª–∞–¥–∫—É –¥–ª—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        self.daily_stats_tab = QWidget()
        self.setup_daily_stats_tab()
        self.tab_widget.addTab(self.daily_stats_tab, "–ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")

        # –î–æ–±–∞–≤–ª—è–µ–º –≤–∏–¥–∂–µ—Ç —Å –≤–∫–ª–∞–¥–∫–∞–º–∏ –≤ –æ—Å–Ω–æ–≤–Ω–æ–π –ª–µ–π–∞—É—Ç
        layout.addWidget(self.tab_widget)

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
        self.refresh_statistics()

    def setup_overview_tab(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–∫–ª–∞–¥–∫–∏ —Å –æ–±–∑–æ—Ä–æ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏."""
        overview_layout = QVBoxLayout(self.overview_tab)
        overview_layout.setContentsMargins(0, 10, 0, 0)
        overview_layout.setSpacing(20)

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        refresh_button_layout = QHBoxLayout()
        refresh_button_layout.setAlignment(Qt.AlignmentFlag.AlignRight)

        self.refresh_stats_button = QPushButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É")
        self.refresh_stats_button.setObjectName("primary")
        self.refresh_stats_button.setFixedWidth(200)
        self.refresh_stats_button.setMinimumHeight(30)
        self.refresh_stats_button.setCursor(Qt.CursorShape.PointingHandCursor)
        self.refresh_stats_button.clicked.connect(self.refresh_statistics)
        refresh_button_layout.addWidget(self.refresh_stats_button)

        overview_layout.addLayout(refresh_button_layout)

        # –°–æ–∑–¥–∞–µ–º –æ–±–ª–∞—Å—Ç—å –ø—Ä–æ–∫—Ä—É—Ç–∫–∏ –¥–ª—è —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ
        scroll_area = QScrollArea()
        scroll_area.setWidgetResizable(True)
        scroll_area.setFrameShape(QFrame.Shape.NoFrame)

        # –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —Å –ø—Ä–æ–∫—Ä—É—Ç–∫–æ–π
        scroll_content = QWidget()
        scroll_layout = QVBoxLayout(scroll_content)
        scroll_layout.setContentsMargins(0, 0, 0, 0)
        scroll_layout.setSpacing(20)

        # –û—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ (4 –∫–∞—Ä—Ç–æ—á–∫–∏)
        stats_layout = QHBoxLayout()
        stats_layout.setSpacing(15)
        stats_layout.setContentsMargins(0, 0, 0, 0)  # –£–±–∏—Ä–∞–µ–º –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ –æ—Ç—Å—Ç—É–ø—ã

        # –ö–∞—Ä—Ç–æ—á–∫–∞ —Å –æ–±—â–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –±–æ–µ–≤
        self.total_battles_card = StatCard(
            "–í—Å–µ–≥–æ –±–æ—ë–≤",
            "0",
            Styles.COLORS["primary"],
            "battle"
        )
        stats_layout.addWidget(self.total_battles_card)

        # –ö–∞—Ä—Ç–æ—á–∫–∞ —Å –ø—Ä–æ—Ü–µ–Ω—Ç–æ–º –ø–æ–±–µ–¥
        self.win_rate_card = StatCard(
            "–ü—Ä–æ—Ü–µ–Ω—Ç –ø–æ–±–µ–¥",
            "0%",
            Styles.COLORS["secondary"],
            "victory_rate"
        )
        stats_layout.addWidget(self.win_rate_card)

        # –ö–∞—Ä—Ç–æ—á–∫–∞ —Å –∫–ª—é—á–∞–º–∏
        self.total_keys_card = StatCard(
            "–í—Å–µ–≥–æ –∫–ª—é—á–µ–π",
            "0",
            Styles.COLORS["warning"],
            "key"
        )
        stats_layout.addWidget(self.total_keys_card)

        # –ö–∞—Ä—Ç–æ—á–∫–∞ —Å —Å–µ—Ä–µ–±—Ä–æ–º (–∑–∞–º–µ–Ω—è–µ–º –∫–∞—Ä—Ç–æ—á–∫—É —Å–æ –≤—Ä–µ–º–µ–Ω–µ–º –∏–≥—Ä—ã)
        self.total_silver_card = StatCard(
            "–í—Å–µ–≥–æ —Å–µ—Ä–µ–±—Ä–∞",
            "0K",
            Styles.COLORS["primary"],
            "silver"
        )
        stats_layout.addWidget(self.total_silver_card)

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—É—é –≤—ã—Å–æ—Ç—É –¥–ª—è –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ –∫–∞—Ä—Ç–æ—á–µ–∫
        stats_container = QWidget()
        stats_container.setLayout(stats_layout)
        stats_container.setSizePolicy(QSizePolicy.Policy.Expanding, QSizePolicy.Policy.Fixed)
        stats_container.setContentsMargins(0, 0, 0, 0)  # –£–±–∏—Ä–∞–µ–º –æ—Ç—Å—Ç—É–ø—ã –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞

        scroll_layout.addWidget(stats_container)

        # –ì—Ä–∞—Ñ–∏–∫–∏ —Ç—Ä–µ–Ω–¥–æ–≤ (2 —Å–µ–∫—Ü–∏–∏ –≤ —Ä—è–¥)
        charts_layout = QHBoxLayout()
        charts_layout.setSpacing(15)
        charts_layout.setContentsMargins(0, 0, 0, 0)  # –£–±–∏—Ä–∞–µ–º –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ –æ—Ç—Å—Ç—É–ø—ã

        # –°–æ–∑–¥–∞–µ–º –≤–∏–¥–∂–µ—Ç—ã –≥—Ä–∞—Ñ–∏–∫–æ–≤
        self.battles_chart_widget = BattlesChartWidget()
        self.silver_chart_widget = SilverChartWidget()  # –ó–∞–º–µ–Ω—è–µ–º –≥—Ä–∞—Ñ–∏–∫ –∫–ª—é—á–µ–π –Ω–∞ –≥—Ä–∞—Ñ–∏–∫ —Å–µ—Ä–µ–±—Ä–∞

        # –î–æ–±–∞–≤–ª—è–µ–º –≤–∏–¥–∂–µ—Ç—ã –≥—Ä–∞—Ñ–∏–∫–æ–≤ –≤ –ª–µ–π–∞—É—Ç
        battles_chart_frame = QFrame()
        battles_chart_frame.setObjectName("section_box")
        battles_chart_layout = QVBoxLayout(battles_chart_frame)
        battles_chart_layout.setContentsMargins(0, 0, 0, 0)
        battles_chart_layout.setSpacing(0)
        battles_chart_layout.addWidget(self.battles_chart_widget)
        charts_layout.addWidget(battles_chart_frame)

        silver_chart_frame = QFrame()
        silver_chart_frame.setObjectName("section_box")
        silver_chart_layout = QVBoxLayout(silver_chart_frame)
        silver_chart_layout.setContentsMargins(0, 0, 0, 0)
        silver_chart_layout.setSpacing(0)
        silver_chart_layout.addWidget(self.silver_chart_widget)
        charts_layout.addWidget(silver_chart_frame)

        scroll_layout.addLayout(charts_layout)

        # –î–æ–±–∞–≤–ª—è–µ–º –µ—â–µ –æ–¥–∏–Ω —Ä—è–¥ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞ –∫–ª—é—á–µ–π
        keys_chart_layout = QHBoxLayout()
        keys_chart_layout.setSpacing(15)
        keys_chart_layout.setContentsMargins(0, 0, 0, 0)

        # –°–æ–∑–¥–∞–µ–º –∏ –¥–æ–±–∞–≤–ª—è–µ–º –≤–∏–¥–∂–µ—Ç –≥—Ä–∞—Ñ–∏–∫–∞ –∫–ª—é—á–µ–π
        self.keys_chart_widget = KeysChartWidget()

        keys_chart_frame = QFrame()
        keys_chart_frame.setObjectName("section_box")
        keys_chart_box_layout = QVBoxLayout(keys_chart_frame)
        keys_chart_box_layout.setContentsMargins(0, 0, 0, 0)
        keys_chart_box_layout.setSpacing(0)
        keys_chart_box_layout.addWidget(self.keys_chart_widget)

        keys_chart_layout.addWidget(keys_chart_frame)

        scroll_layout.addLayout(keys_chart_layout)

        # –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞—Å—Ç—è–∂–∫—É –≤–Ω–∏–∑—É –¥–ª—è –ª—É—á—à–µ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞ —Ä–∞–∑–Ω—ã—Ö —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è—Ö
        scroll_layout.addStretch(1)

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤–∏–¥–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –≤ –æ–±–ª–∞—Å—Ç—å –ø—Ä–æ–∫—Ä—É—Ç–∫–∏
        scroll_area.setWidget(scroll_content)
        overview_layout.addWidget(scroll_area)

    def setup_daily_stats_tab(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–∫–ª–∞–¥–∫–∏ —Å –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π."""
        daily_stats_layout = QVBoxLayout(self.daily_stats_tab)
        daily_stats_layout.setContentsMargins(0, 10, 0, 0)
        daily_stats_layout.setSpacing(15)

        # –°–æ–∑–¥–∞–µ–º –±–ª–æ–∫ —Å –∫–Ω–æ–ø–∫–æ–π –∏ –æ–ø–∏—Å–∞–Ω–∏–µ–º
        top_layout = QHBoxLayout()

        # –û–ø–∏—Å–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã
        description_label = QLabel("–ü–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π —Å –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏–µ–π –ø–æ –¥–Ω—è–º")
        description_label.setStyleSheet(f"color: {Styles.COLORS['text_secondary']};")
        top_layout.addWidget(description_label)

        top_layout.addStretch(1)

        # –ö–Ω–æ–ø–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        self.refresh_daily_stats_button = QPushButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É")
        self.refresh_daily_stats_button.setObjectName("primary")
        self.refresh_daily_stats_button.setFixedWidth(200)
        self.refresh_daily_stats_button.setMinimumHeight(30)
        self.refresh_daily_stats_button.setCursor(Qt.CursorShape.PointingHandCursor)
        self.refresh_daily_stats_button.clicked.connect(self.refresh_statistics)
        top_layout.addWidget(self.refresh_daily_stats_button)

        daily_stats_layout.addLayout(top_layout)

        # –¢–∞–±–ª–∏—Ü–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤ —Ä–∞–º–∫–µ —Å –∑–∞–≥–æ–ª–æ–≤–∫–æ–º
        daily_stats_frame = QFrame()
        daily_stats_frame.setObjectName("section_box")
        daily_stats_layout_frame = QVBoxLayout(daily_stats_frame)
        daily_stats_layout_frame.setContentsMargins(0, 0, 0, 0)
        daily_stats_layout_frame.setSpacing(0)

        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Ç–∞–±–ª–∏—Ü—ã
        daily_stats_header = QLabel("–ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ (7 –¥–Ω–µ–π)")
        daily_stats_header.setObjectName("header")
        daily_stats_header.setSizePolicy(QSizePolicy.Policy.Expanding, QSizePolicy.Policy.Fixed)
        daily_stats_layout_frame.addWidget(daily_stats_header)

        # –¢–∞–±–ª–∏—Ü–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        self.daily_stats_table = StyledTable()
        self.daily_stats_table.setColumnCount(9)  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç–æ–ª–±—Ü–æ–≤ –¥–ª—è —Å–µ—Ä–µ–±—Ä–∞
        self.daily_stats_table.setHorizontalHeaderLabels([
            "–î–∞—Ç–∞", "–ë–æ—ë–≤", "–ü–æ–±–µ–¥—ã", "–ü–æ—Ä–∞–∂–µ–Ω–∏—è",
            "% –ø–æ–±–µ–¥", "–ö–ª—é—á–µ–π", "–ö–ª—é—á–µ–π/–ø–æ–±–µ–¥–∞", "–°–µ—Ä–µ–±—Ä–æ", "–ü–æ—Ç–µ—Ä—å —Å–≤—è–∑–∏"
        ])

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–∞—Å—Ç—è–∂–µ–Ω–∏–µ –¥–ª—è —Å—Ç–∏–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã
        self.daily_stats_table.setSizePolicy(QSizePolicy.Policy.Expanding, QSizePolicy.Policy.Expanding)
        self.daily_stats_table.setMinimumHeight(300)  # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –≤—ã—Å–æ—Ç–∞ –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞

        daily_stats_layout_frame.addWidget(self.daily_stats_table, 1)
        daily_stats_layout.addWidget(daily_stats_frame, 1)

        # –õ–µ–≥–µ–Ω–¥–∞ –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã
        legend_frame = QFrame()
        legend_frame.setStyleSheet(f"background-color: {Styles.COLORS['background_light']}; border-radius: 8px;")
        legend_layout = QHBoxLayout(legend_frame)

        legend_title = QLabel("–¶–≤–µ—Ç–æ–≤—ã–µ –æ–±–æ–∑–Ω–∞—á–µ–Ω–∏—è:")
        legend_title.setStyleSheet("font-weight: bold;")
        legend_layout.addWidget(legend_title)

        victory_legend = QLabel("‚óè –ü–æ–±–µ–¥—ã")
        victory_legend.setStyleSheet(f"color: {Styles.COLORS['secondary']};")
        legend_layout.addWidget(victory_legend)

        defeat_legend = QLabel("‚óè –ü–æ—Ä–∞–∂–µ–Ω–∏—è")
        defeat_legend.setStyleSheet(f"color: {Styles.COLORS['accent']};")
        legend_layout.addWidget(defeat_legend)

        key_legend = QLabel("‚óè –ö–ª—é—á–∏")
        key_legend.setStyleSheet(f"color: {Styles.COLORS['warning']};")
        legend_layout.addWidget(key_legend)

        silver_legend = QLabel("‚óè –°–µ—Ä–µ–±—Ä–æ")
        silver_legend.setStyleSheet(f"color: {Styles.COLORS['primary']};")
        legend_layout.addWidget(silver_legend)

        connection_legend = QLabel("‚óè –ü–æ—Ç–µ—Ä–∏ —Å–≤—è–∑–∏")
        connection_legend.setStyleSheet(f"color: {Styles.COLORS['accent']};")
        legend_layout.addWidget(connection_legend)

        legend_layout.addStretch()

        daily_stats_layout.addWidget(legend_frame)

    def update_stats_period(self):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞."""
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥
            period_index = self.period_combo.currentIndex()
            period_mapping = {
                0: "day",
                1: "week",
                2: "month",
                3: "all"
            }
            period = period_mapping.get(period_index, "all")

            self._py_logger.info(f"–ò–∑–º–µ–Ω–µ–Ω–∏–µ –ø–µ—Ä–∏–æ–¥–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –Ω–∞: {period}")

            # –û—á–∏—â–∞–µ–º –∫—ç—à –≥—Ä–∞—Ñ–∏–∫–æ–≤ –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            if hasattr(self, 'battles_chart_widget'):
                self.battles_chart_widget.clear_cache()
            if hasattr(self, 'keys_chart_widget'):
                self.keys_chart_widget.clear_cache()
            if hasattr(self, 'silver_chart_widget'):
                self.silver_chart_widget.clear_cache()

            # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            self.refresh_statistics(show_message=True)

            self._py_logger.info(f"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –¥–ª—è –ø–µ—Ä–∏–æ–¥–∞: {period}")
        except Exception as e:
            self._py_logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø–µ—Ä–∏–æ–¥–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
            import traceback
            self._py_logger.error(traceback.format_exc())

    def refresh_statistics(self, show_message=True):
        """
        –û–±–Ω–æ–≤–ª—è–µ—Ç –≤—Å–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–æ–π –¥–∞–Ω–Ω—ã—Ö.

        Args:
            show_message (bool): –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏
        """
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç—É–ø–µ–Ω –ª–∏ stats_manager
        if not hasattr(self.bot_engine, 'stats_manager') or self.bot_engine.stats_manager is None:
            self._py_logger.warning("StatsManager –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É")
            return

        try:
            # –û—Ç–∫–ª—é—á–∞–µ–º –∫–Ω–æ–ø–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–∞ –≤—Ä–µ–º—è –æ–ø–µ—Ä–∞—Ü–∏–∏
            self.refresh_stats_button.setEnabled(False)
            if hasattr(self, 'refresh_daily_stats_button'):
                self.refresh_daily_stats_button.setEnabled(False)

            # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ..." –Ω–∞ –∫–Ω–æ–ø–∫–∏
            original_text = self.refresh_stats_button.text()
            self.refresh_stats_button.setText("‚è≥ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ...")
            if hasattr(self, 'refresh_daily_stats_button'):
                self.refresh_daily_stats_button.setText("‚è≥ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ...")

            # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å, —á—Ç–æ–±—ã –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞–ª–∏ –≤–∏–¥–Ω—ã
            QApplication.processEvents()

            self._py_logger.info("–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–∞–ø—É—â–µ–Ω–æ...")

            # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–≥—Ä—É–∂–∞–µ–º —Å–≤–µ–∂–∏–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–∞–π–ª–∞
            self.bot_engine.stats_manager.load_stats()
            self._py_logger.debug("–î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ —Ñ–∞–π–ª–∞")

            # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥
            period_index = self.period_combo.currentIndex()
            period_mapping = {
                0: "day",
                1: "week",
                2: "month",
                3: "all"
            }
            period = period_mapping.get(period_index, "all")
            self._py_logger.debug(f"–í—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥: {period}")

            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞
            stats_data = self.bot_engine.stats_manager.get_stats_by_period(period)
            self._py_logger.debug(f"–ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è –ø–µ—Ä–∏–æ–¥–∞ {period}")

            # –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞—Ä—Ç–æ—á–∫–∏ —Å –æ—Å–Ω–æ–≤–Ω—ã–º–∏ –ø–æ–∫–∞–∑–∞—Ç–µ–ª—è–º–∏
            self.update_stats_cards(stats_data)
            self._py_logger.debug("–ö–∞—Ä—Ç–æ—á–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã")

            # –û—á–∏—â–∞–µ–º –∫—ç—à –≥—Ä–∞—Ñ–∏–∫–æ–≤ –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø–æ–ª–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            if hasattr(self, 'battles_chart_widget'):
                self.battles_chart_widget.clear_cache()
            if hasattr(self, 'keys_chart_widget'):
                self.keys_chart_widget.clear_cache()
            if hasattr(self, 'silver_chart_widget'):
                self.silver_chart_widget.clear_cache()
            self._py_logger.debug("–ö—ç—à –≥—Ä–∞—Ñ–∏–∫–æ–≤ –æ—á–∏—â–µ–Ω")

            # –û–±–Ω–æ–≤–ª—è–µ–º –≥—Ä–∞—Ñ–∏–∫–∏ —Ç—Ä–µ–Ω–¥–æ–≤ (–ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ)
            self.update_trend_charts(force_update=True)
            self._py_logger.debug("–ì—Ä–∞—Ñ–∏–∫–∏ —Ç—Ä–µ–Ω–¥–æ–≤ –æ–±–Ω–æ–≤–ª–µ–Ω—ã")

            # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–∞–±–ª–∏—Ü—É –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            self.update_daily_stats_table()
            self._py_logger.debug("–¢–∞–±–ª–∏—Ü–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∞")

            self._py_logger.info("–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ")

            # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç –∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –∫–Ω–æ–ø–æ–∫
            self.refresh_stats_button.setText(original_text)
            self.refresh_stats_button.setEnabled(True)
            if hasattr(self, 'refresh_daily_stats_button'):
                self.refresh_daily_stats_button.setText(original_text)
                self.refresh_daily_stats_button.setEnabled(True)

            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏
            if show_message:
                self.show_update_success_message()

        except Exception as e:
            self._py_logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
            import traceback
            self._py_logger.error(traceback.format_exc())

            # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç –∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –∫–Ω–æ–ø–æ–∫ –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
            self.refresh_stats_button.setText(original_text)
            self.refresh_stats_button.setEnabled(True)
            if hasattr(self, 'refresh_daily_stats_button'):
                self.refresh_daily_stats_button.setText(original_text)
                self.refresh_daily_stats_button.setEnabled(True)

    def update_trend_charts(self, force_update=False):
        """
        –û–±–Ω–æ–≤–ª—è–µ—Ç –≥—Ä–∞—Ñ–∏–∫–∏ —Ç—Ä–µ–Ω–¥–æ–≤ —Å –ø–æ—Å–ª–µ–¥–Ω–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏.

        Args:
            force_update (bool): –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–æ–≤ –¥–∞–∂–µ –µ—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–∏—Å—å
        """
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç—É–ø–µ–Ω –ª–∏ stats_manager
            if not hasattr(self.bot_engine, 'stats_manager') or self.bot_engine.stats_manager is None:
                self._py_logger.warning("StatsManager –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å –≥—Ä–∞—Ñ–∏–∫–∏")
                return

            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ç—Ä–µ–Ω–¥–æ–≤
            trend_data = self.bot_engine.stats_manager.get_trend_data()
            self._py_logger.debug(f"–ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ —Ç—Ä–µ–Ω–¥–æ–≤: {len(trend_data.get('dates', []))} –¥–∞—Ç")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ª–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            if not trend_data or len(trend_data.get("dates", [])) < 1:
                self._py_logger.warning("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–æ–≤")
                # –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö - –æ—á–∏—â–∞–µ–º –≥—Ä–∞—Ñ–∏–∫–∏
                self.battles_chart_widget.clear()
                self.keys_chart_widget.clear()
                self.silver_chart_widget.clear()
                return

            # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º –≥—Ä–∞—Ñ–∏–∫–∏ –±–µ–∑ –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
            self._py_logger.debug("–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–æ–≤")

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            if hasattr(self, '_last_chart_update'):
                old_trend = self._last_chart_update
                self._py_logger.debug(f"–°—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ —Ç—Ä–µ–Ω–¥–æ–≤: {len(old_trend.get('dates', []))} –¥–∞—Ç")

                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –¥–∞–Ω–Ω—ã—Ö –æ —Å–µ—Ä–µ–±—Ä–µ
                old_silver = old_trend.get('silver_collected', [])
                new_silver = trend_data.get('silver_collected', [])
                self._py_logger.debug(f"–°–µ—Ä–µ–±—Ä–æ –≤ —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö: {old_silver}")
                self._py_logger.debug(f"–°–µ—Ä–µ–±—Ä–æ –≤ –Ω–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö: {new_silver}")

            # –û–±–Ω–æ–≤–ª—è–µ–º –≥—Ä–∞—Ñ–∏–∫–∏ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ
            self._last_chart_update = trend_data

            # –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞–∂–¥—ã–π –≥—Ä–∞—Ñ–∏–∫ –æ—Ç–¥–µ–ª—å–Ω–æ –¥–ª—è –±–æ–ª–µ–µ –Ω–∞–¥–µ–∂–Ω–æ–π —Ä–∞–±–æ—Ç—ã
            try:
                self.battles_chart_widget.update_chart(trend_data)
                self._py_logger.debug("–ì—Ä–∞—Ñ–∏–∫ –±–æ–µ–≤ –æ–±–Ω–æ–≤–ª–µ–Ω")
            except Exception as e:
                self._py_logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –≥—Ä–∞—Ñ–∏–∫–∞ –±–æ–µ–≤: {e}")

            try:
                self.keys_chart_widget.update_chart(trend_data)
                self._py_logger.debug("–ì—Ä–∞—Ñ–∏–∫ –∫–ª—é—á–µ–π –æ–±–Ω–æ–≤–ª–µ–Ω")
            except Exception as e:
                self._py_logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –≥—Ä–∞—Ñ–∏–∫–∞ –∫–ª—é—á–µ–π: {e}")

            try:
                self.silver_chart_widget.update_chart(trend_data)
                self._py_logger.debug("–ì—Ä–∞—Ñ–∏–∫ —Å–µ—Ä–µ–±—Ä–∞ –æ–±–Ω–æ–≤–ª–µ–Ω")
            except Exception as e:
                self._py_logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –≥—Ä–∞—Ñ–∏–∫–∞ —Å–µ—Ä–µ–±—Ä–∞: {e}")

        except Exception as e:
            self._py_logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –≥—Ä–∞—Ñ–∏–∫–æ–≤: {e}")
            import traceback
            self._py_logger.error(traceback.format_exc())

    def update_stats_cards(self, stats_data=None):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –∫–∞—Ä—Ç–æ—á–∫–∏ —Å –æ—Å–Ω–æ–≤–Ω—ã–º–∏ –ø–æ–∫–∞–∑–∞—Ç–µ–ª—è–º–∏."""
        if stats_data is None:
            # –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω—ã, –ø—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∏—Ö
            if not hasattr(self.bot_engine, 'stats_manager') or self.bot_engine.stats_manager is None:
                self._py_logger.warning("StatsManager –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å –∫–∞—Ä—Ç–æ—á–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")
                return

            # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥
            period_index = self.period_combo.currentIndex()
            period_mapping = {
                0: "day",
                1: "week",
                2: "month",
                3: "all"
            }
            period = period_mapping.get(period_index, "all")

            stats_data = self.bot_engine.stats_manager.get_stats_by_period(period)

        # –õ–æ–≥–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        self._py_logger.debug(f"–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–µ–∫ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏. –ü–µ—Ä–∏–æ–¥: {stats_data.get('period', 'unknown')}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –≤—Å–µ—Ö –Ω—É–∂–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        if "stats" not in stats_data:
            self._py_logger.error("–í –¥–∞–Ω–Ω—ã—Ö —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∫–ª—é—á 'stats'")
            return

        # –ë–µ–∑–æ–ø–∞—Å–Ω–æ –ø–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        victories = stats_data["stats"].get("victories", 0)
        defeats = stats_data["stats"].get("defeats", 0)
        keys_collected = stats_data["stats"].get("keys_collected", 0)

        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞—Ä—Ç–æ—á–∫–∏ —Å –æ—Å–Ω–æ–≤–Ω—ã–º–∏ –ø–æ–∫–∞–∑–∞—Ç–µ–ª—è–º–∏
        total_battles = victories + defeats
        self.total_battles_card.set_value(str(total_battles))

        win_rate = stats_data.get("win_rate", 0)
        self.win_rate_card.set_value(f"{win_rate:.1f}%")

        self.total_keys_card.set_value(str(keys_collected))

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ —Å–µ—Ä–µ–±—Ä–∞ —Å –Ω–∞–¥–µ–∂–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π
        try:
            # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ —Å–µ—Ä–µ–±—Ä–µ
            if "silver_collected" in stats_data["stats"]:
                silver_collected = stats_data["stats"]["silver_collected"]
                self._py_logger.debug(f"–°–µ—Ä–µ–±—Ä–æ –∏–∑ –¥–∞–Ω–Ω—ã—Ö: {silver_collected}")
            else:
                silver_collected = 0
                self._py_logger.warning("–ü–æ–ª–µ silver_collected –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –¥–∞–Ω–Ω—ã—Ö —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")

            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            self._py_logger.debug(f"–¢–∏–ø –¥–∞–Ω–Ω—ã—Ö —Å–µ—Ä–µ–±—Ä–∞: {type(silver_collected)}")

            # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ silver_collected —è–≤–ª—è–µ—Ç—Å—è —á–∏—Å–ª–æ–º
            if not isinstance(silver_collected, (int, float)):
                self._py_logger.warning(f"–ó–Ω–∞—á–µ–Ω–∏–µ —Å–µ—Ä–µ–±—Ä–∞ –∏–º–µ–µ—Ç –Ω–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø: {type(silver_collected)}")
                silver_collected = 0

            # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è
            silver_formatted = Styles.format_silver(silver_collected)
            self._py_logger.debug(f"–û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–µ—Ä–µ–±—Ä–æ: {silver_formatted}")

            # –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞—Ä—Ç–æ—á–∫—É
            self.total_silver_card.set_value(silver_formatted)

        except Exception as e:
            self._py_logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–µ—Ä–µ–±—Ä–∞: {e}")
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–µ–∑–æ–ø–∞—Å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            self.total_silver_card.set_value("0K")

        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –æ–±—â–µ–µ –≤—Ä–µ–º—è –∏–≥—Ä—ã –ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        total_hours = stats_data.get("total_duration_hours", 0)
        if hasattr(self, 'total_time_card'):
            self.total_time_card.set_value(f"{total_hours:.1f} —á")

    def update_daily_stats_table(self):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Ç–∞–±–ª–∏—Ü—É –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏."""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç—É–ø–µ–Ω –ª–∏ stats_manager
            if not hasattr(self.bot_engine, 'stats_manager') or self.bot_engine.stats_manager is None:
                self._py_logger.warning("StatsManager –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å —Ç–∞–±–ª–∏—Ü—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")
                return

            # –ü–æ–ª—É—á–∞–µ–º –µ–∂–µ–¥–Ω–µ–≤–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            daily_stats = self.bot_engine.stats_manager.get_daily_stats(7)
            self._py_logger.debug(f"–ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {len(daily_stats)} –¥–Ω–µ–π")

            # –û—á–∏—â–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Å—Ç—Ä–æ–∫–∏
            self.daily_stats_table.setRowCount(0)

            # –ó–∞–ø–æ–ª–Ω—è–µ–º —Ç–∞–±–ª–∏—Ü—É –¥–∞–Ω–Ω—ã–º–∏
            for row, day in enumerate(daily_stats):
                self.daily_stats_table.insertRow(row)

                # –î–∞—Ç–∞
                self.daily_stats_table.setItem(row, 0, QTableWidgetItem(day["display_date"]))

                # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –±–æ–∏
                battles = day["stats"]["victories"] + day["stats"]["defeats"]
                self.daily_stats_table.setItem(row, 1, QTableWidgetItem(str(battles)))

                # –ü–æ–±–µ–¥—ã
                self.daily_stats_table.setItem(row, 2, QTableWidgetItem(str(day["stats"]["victories"])))

                # –ü–æ—Ä–∞–∂–µ–Ω–∏—è
                self.daily_stats_table.setItem(row, 3, QTableWidgetItem(str(day["stats"]["defeats"])))

                # –ü—Ä–æ—Ü–µ–Ω—Ç –ø–æ–±–µ–¥
                win_rate = day.get("win_rate", 0)
                self.daily_stats_table.setItem(row, 4, QTableWidgetItem(f"{win_rate:.1f}%"))

                # –°–æ–±—Ä–∞–Ω–æ –∫–ª—é—á–µ–π
                self.daily_stats_table.setItem(row, 5, QTableWidgetItem(str(day["stats"]["keys_collected"])))

                # –ö–ª—é—á–µ–π –∑–∞ –ø–æ–±–µ–¥—É
                keys_per_victory = day.get("keys_per_victory", 0)
                self.daily_stats_table.setItem(row, 6, QTableWidgetItem(f"{keys_per_victory:.1f}"))

                # –°–æ–±—Ä–∞–Ω–æ —Å–µ—Ä–µ–±—Ä–∞ - —Å –±–µ–∑–æ–ø–∞—Å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π
                try:
                    silver_collected = day["stats"].get("silver_collected", 0)
                    silver_formatted = Styles.format_silver(silver_collected)
                    self.daily_stats_table.setItem(row, 7, QTableWidgetItem(silver_formatted))
                except Exception as e:
                    self._py_logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–µ—Ä–µ–±—Ä–∞ –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã: {e}")
                    self.daily_stats_table.setItem(row, 7, QTableWidgetItem("0K"))

                # –ü–æ—Ç–µ—Ä–∏ —Å–≤—è–∑–∏
                self.daily_stats_table.setItem(row, 8, QTableWidgetItem(str(day["stats"]["connection_losses"])))

            # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ü–≤–µ—Ç–æ–≤–æ–π –∏–Ω–¥–∏–∫–∞—Ü–∏–∏
            self.daily_stats_table.customize_cell_colors()

        except Exception as e:
            self._py_logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ç–∞–±–ª–∏—Ü—ã –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
            import traceback
            self._py_logger.error(traceback.format_exc())

    def show_update_success_message(self):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏."""
        try:
            from PyQt6.QtWidgets import QLabel
            from PyQt6.QtCore import QTimer, Qt

            # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –º–µ—Ç–∫—É
            success_label = QLabel("‚úì –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã", self)
            success_label.setStyleSheet(f"""
                background-color: {Styles.COLORS['secondary']};
                color: {Styles.COLORS['background_dark']};
                padding: 8px 16px;
                border-radius: 4px;
                font-weight: bold;
            """)
            success_label.setAlignment(Qt.AlignmentFlag.AlignCenter)
            success_label.adjustSize()  # –ü–æ–¥–≥–æ–Ω—è–µ–º —Ä–∞–∑–º–µ—Ä –ø–æ–¥ —Ç–µ–∫—Å—Ç

            # –ü–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä—É–µ–º –º–µ—Ç–∫—É –≤ –≤–µ—Ä—Ö–Ω–µ–º –ø—Ä–∞–≤–æ–º —É–≥–ª—É
            success_label.move(self.width() - success_label.width() - 20, 20)
            success_label.show()

            # –£–¥–∞–ª—è–µ–º –º–µ—Ç–∫—É —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
            QTimer.singleShot(3000, success_label.deleteLater)
        except Exception as e:
            self._py_logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± —É—Å–ø–µ—à–Ω–æ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏: {e}")